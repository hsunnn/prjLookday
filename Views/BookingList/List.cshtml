@* @model IEnumerable<prjLookday.ViewModels.CBookingListViewModel> *@
    @model X.PagedList.IPagedList<prjLookday.ViewModels.CBookingListViewModel>

@using X.PagedList.Mvc.Core;
@using X.PagedList;

<nav style="background-color: rgb(225,223,218);">
    <h1>訂單管理</h1>
    <div>
        <div class="input-group" style="justify-content:flex-end">
            <div style="display: flex">
                <input type="text" id="inputsearch" placeholder="搜尋訂單編號/客戶名稱" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                <div class="input-group-append">
                    <button type="submit" onclick="getBooking()" class="btn btn-outline-secondary" id="searchButton">搜尋</button>
                </div>
                <div class="input-group-append">
                    <button type="submit" id="allorders" onclick="allbookings()" class="btn btn-outline-secondary">全部訂單</button>
                </div>
            </div>
        </div>

        <div class="input-group" style="justify-content:flex-end">
            <div style="display: flex">
                <input type="date" id="startdate" />
                <input type="date" id="enddate" />
                <button id="searchdate" onclick="getdurationbookings()" class="btn btn-outline-secondary">搜尋</button>
            </div>
        </div>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">訂單狀態</button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item" href="#" id="complete">已完成付款</a></li>
                <li><a class="dropdown-item" href="#" id="shoppingchart">購物車</a></li>
                <li><a class="dropdown-item" href="#" id="collect">收藏</a></li>
            </ul>
        </div>

        @* 頁面按鈕 *@
       <div>
            @Html.PagedListPager((IPagedList)Model, page=>Url.Action("List", new{page}))
       </div>



    </div>


    <table id="bookingsTable" class="table table-striped" style="background-color:#F0F0F0">
        <!--style="text-align: center;-->
        <thead>
            <tr style="width:250px; background-color:#FFDCB9">
                <th scope="col">序號</th>
                <th scope="col">訂單編號</th>
                <th scope="col">訂單日期</th>
                <th scope="col">客戶資訊</th>
                <th scope="col">活動資訊</th>
                <th scope="col">金額</th>
                <th scope="col">訂單狀態</th>
            </tr>
        </thead>
        <tbody>
           @*  <tr id="loading-indicator">
                <td colspan="12" scope="row"> loading........</td>
            </tr> *@
            <!-- 添加JavaScript的資料 -->
            @{
                int count = (Model.PageNumber - 1) * Model.PageSize;
                foreach (var bookings in Model)
                {
                    count++;
                    <tr id="loading-indicator">
                        <td scope="row">@count</td>
                        <td scope="row">@bookings.BookingId</td>
                        <td scope="row">@bookings.BookingDate</td>
                        <td scope="row">@bookings.UserName</td>
                        <td scope="row">@bookings.ActivityName</td>
                        <td scope="row">@bookings.Price</td>
                        <td scope="row">@bookings.bookingStatus</td>
                    </tr>

                }
            }


        </tbody>
    </table>
</nav>
@section Styles {
    <style>
        #activitytable {
            display: none;
        }
    </style>
}

@section Scripts {
    <script>
        let bookingData = [];  //儲存所有預定數據

        async function loadBookings() {
            const response = await fetch('/api/BookingOrder');
            const data = await response.json();
            bookingData = data;
            // populateTable(bookingData);
        }

        function populateTable(data) {
            //getElementsByTagName會將 < tbody > 裡面的內容，丟進 tableBody 變數當中
            const tableBody = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = ''; // 清空原先資料

            //每次索引都從0開始
            let index = 0;

            data.forEach((data) => {
                if (data.bookingStatus === "已完成付款") {
                    const row = tableBody.insertRow();
                    row.insertCell(0).innerHTML = index + 1;
                    row.insertCell(1).innerText = data.bookingId;
                    row.insertCell(2).innerText = new Date(data.bookingDate).toLocaleDateString(); //用于将日期对象转换为特定语言格式的日期字符串。它可以根据本地语言环境（Locale）来格式化日期，提供了一种简便的方法来显示用户友好的日期格式。
                    row.insertCell(3).innerHTML = data.userDisplay;
                    row.insertCell(4).innerHTML = data.activityDisplay;
                    row.insertCell(5).innerText = `$${data.price.toLocaleString('en-US')}`;
                    row.insertCell(6).innerText = data.bookingStatus;
                    index++;
                }
                    });
        }

        
        //已完成付款
        document.getElementById('complete').addEventListener('click', async () => {
            console.log(complete);
            document.getElementById('dropdownMenuButton1').innerHTML = "已完成付款";
           // populateTable(bookingData);
          
        });

        //購物車
        function shoppingchartTable(data) {
            //getElementsByTagName會將 < tbody > 裡面的內容，丟進 tableBody 變數當中
            const tableBody = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = ''; // 清空原先資料
            //const btncell = document.createElement("button");

            let index = 0;

            data.forEach((data) => {
                if (data.bookingStatus === "購物車") {
                    const row = tableBody.insertRow();
                    row.insertCell(0).innerHTML = index + 1;
                    row.insertCell(1).innerText = data.bookingId;
                    row.insertCell(2).innerText = new Date(data.bookingDate).toLocaleDateString(); //用于将日期对象转换为特定语言格式的日期字符串。它可以根据本地语言环境（Locale）来格式化日期，提供了一种简便的方法来显示用户友好的日期格式。
                    //row.insertCell(3).innerHTML = data.UserName;
                    row.insertCell(3).innerHTML = data.userDisplay;
                    row.insertCell(4).innerHTML = data.activityDisplay;
                    row.insertCell(5).innerText = data.price;
                    row.insertCell(6).innerText = data.bookingStatus;
                }
                index++;
            });
        };


        document.getElementById("shoppingchart").addEventListener('click', () => {
            console.log(shoppingchart);
            document.getElementById('dropdownMenuButton1').innerHTML = "購物車";
            shoppingchartTable(bookingData);
        });

        //收藏
        function collectTable(data) {
            //getElementsByTagName會將 < tbody > 裡面的內容，丟進 tableBody 變數當中
            const tableBody = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = ''; // 清空原先資料
            //const btncell = document.createElement("button");

            let index = 0;
            data.forEach((data) => {
                if (data.bookingStatus === "收藏") {
                    const row = tableBody.insertRow();
                    row.insertCell(0).innerHTML = index + 1;
                    row.insertCell(1).innerText = data.bookingId;
                    row.insertCell(2).innerText = new Date(data.bookingDate).toLocaleDateString(); //用于将日期对象转换为特定语言格式的日期字符串。它可以根据本地语言环境（Locale）来格式化日期，提供了一种简便的方法来显示用户友好的日期格式。
                    //row.insertCell(3).innerHTML = data.UserName;
                    row.insertCell(3).innerHTML = data.userDisplay;
                    row.insertCell(4).innerHTML = data.activityDisplay;
                    row.insertCell(5).innerText = data.price;
                    row.insertCell(6).innerText = data.bookingStatus;
                }
                index++;
            });
        };


        document.getElementById("collect").addEventListener('click', () => {
            console.log(collect);
            document.getElementById('dropdownMenuButton1').innerHTML = "收藏";
            collectTable(bookingData);
        });

        //搜尋訂單編號/客戶姓名
        async function getBooking() {
            console.log("afsdfweqrfqwefdsfdsafsda")
            const search = document.getElementById('inputsearch').value.trim();
            if (!search) {
                alert("請輸入訂單編號或用戶名稱");
                return;
            }

            let url;
            if (isNaN(search)) {
                //如果不是數字 就會判定為用戶名
                url = `/api/BookingOrder/ByUsername/${encodeURIComponent(search)}`;
            } else {
                //如果是數字就判定是訂單編號
                url = `/api/BookingOrder/ById/${search}`;

            }

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error("HTTP error! status:${response.status}");
                }

                const data = await response.json();
                if (Array.isArray(data)) {
                    populateTable(data);  // For username search
                }
                else {
                    populateTable([data]);  // For ID search
                }
            }
            catch (error) {
                console.log('Error fetching data:', error);
                alert('找不到該訂單或用戶');
            }

        }

        //顯示全部訂單資料
        document.getElementById("allorders").addEventListener('click', () => {
            populateTable(bookingData);
        });

        //顯示日期區間內資料
        async function getdurationbookings() {
            const startDate = document.getElementById("startdate").value;
            const endDate = document.getElementById("enddate").value;

            if (!startDate || !endDate) {
                alert("請選擇完整日期區間");
                return;
            }

            if (document.getElementById('dropdownMenuButton1').innerHTML === "已完成付款") {
                populateTable(bookingData);
                console.log("1111111111111111111");
            }
            else if (document.getElementById('dropdownMenuButton1').innerHTML === "購物車") {
                shoppingchartTable(bookingData);
                console.log("222222222222222222");
            }
            else if (document.getElementById('dropdownMenuButton1').innerHTML === "收藏") {
                collectTable(bookingData);
                console.log("3333333333333333333");
            }
            else { }


            const url = `https://localhost:7221/api/filter/activitydate?startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`;

            const response = await fetch(url);
            console.log(response);
            if (!response.ok) {
                alert('找不到該日期的訂單');
                return;
            }
            const data = await response.json();

            //顯示table
            document.getElementById('bookingsTable').style.display = 'table';
            datetable(data);
        }

        function datetable(data) {
            const tablebody = document.getElementById('bookingsTable').getElementsByTagName('tbody')[0];
            tablebody.innerHTML = '';     //清空原始數據


            data.forEach((data, index) => {
                const row = tablebody.insertRow();
                row.insertCell(0).innerHTML = index + 1;
                row.insertCell(1).innerText = data.bookingId;
                row.insertCell(2).innerText = new Date(data.bookingDate).toLocaleDateString(); //用于将日期对象转换为特定语言格式的日期字符串。它可以根据本地语言环境（Locale）来格式化日期，提供了一种简便的方法来显示用户友好的日期格式。
                row.insertCell(3).innerHTML = data.userDisplay;
                row.insertCell(4).innerHTML = data.activityDisplay;
                row.insertCell(5).innerText = data.price;
                row.insertCell(6).innerText = data.bookingStatus;
            });
        }

        //一載入頁面 就顯示資料
        window.onload = loadBookings;
    </script>
}

               